import ai.nodes.Node;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class CodeGenerator {
    final String LEVEL_SOURCE_DIRECTORY = System.getProperty("user.dir") + "/antlr/src/main/java/level/levels/";
    final String LEVEL_OUTPUT_DIRECTORY = System.getProperty("user.dir") + "/pacman/levels/";

    public void createLevelFiles(String ... levelNames) throws IOException {
        for (final String lN: levelNames) {
            final File outputFile = new File(LEVEL_OUTPUT_DIRECTORY + lN + ".js");
            List<List> totalValues = PacmanParserExecutor.parseLevel(LEVEL_SOURCE_DIRECTORY + lN + ".csv");
            try (
                    final FileWriter fw = new FileWriter(outputFile);
            ) {
                final FormattingCodeWriter codeWriter = new FormattingCodeWriter(fw);
                codeWriter.append("// JavaScript file generated by CodeGenerator");
                codeWriter.blankLine();
                codeWriter.append(
                        "define([], function () {",
                        "return {",
                        "floor: 0,",
                        "point: 1,",
                        "fruit: 2,",
                        "wall: 3,",
                        "map:",
                        "["
                );
                for (List li : totalValues) {
                    codeWriter.append(li + ",");
                }

                codeWriter.append(
                        "]",
                        "}",
                        "}",
                        ");"
                );
                codeWriter.write();
            }
        }
    }

    final String AI_SOURCE_DIRECTORY = System.getProperty("user.dir") + "/antlr/src/main/java/ai/strategies/";
    final String AI_OUTPUT_DIRECTORY = System.getProperty("user.dir") + "/pacman/strategies/";

    public void createAiFiles(String ... aiNames) throws IOException {
        for(final String aiN: aiNames) {
            final File outputFile = new File(AI_OUTPUT_DIRECTORY + aiN + ".js");
            ParsingResult<Node> result = PacmanParserExecutor.parseAi(AI_SOURCE_DIRECTORY + aiN + ".ai");
            if (result.getNumberOfSyntaxErrors() > 0) {
                System.out.println("Illegal format parsing ai " + aiN + ", exiting.");
                return;
            }
            Node rootNode = result.getResult();
            try (
                    final FileWriter fw = new FileWriter(outputFile);
            ) {
                final FormattingCodeWriter codeWriter = new FormattingCodeWriter(fw);
                codeWriter.append(rootNode.renderCode());
                codeWriter.write();
            }
        }
    }

    public static void main(String args[]) throws IOException {
        System.out.println(System.getProperty("user.dir"));
        System.out.println("Starting code generation...");
        final CodeGenerator cg = new CodeGenerator();
        //cg.createLevelFiles("level1");
        cg.createAiFiles("random", "simple");
        System.out.println("Finished code generation...");
    }
}

